//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: RE_Engine_UVAR.bt
//   Authors: alphaZomega
//   Version: 0.21
//   Purpose: Parsing uvar.2 files
//  Category: RE Engine
// File Mask: *.uvar.*
//  ID Bytes: [+4] 75 76 61 72
//   History: October 17 2021
//------------------------------------------------
local uint64 i <hidden=true>, j <hidden=true>, k <hidden=true>, start <hidden=true>, pos <hidden=true>;

void skipToNextLine() {
    while(FTell()%16 != 0)
        FSkip(1);
}

int detectedFloat(uint64 offset) {
    return Abs(ReadFloat(offset)) == 0 || (Abs(ReadFloat(offset)) > 0.0000000000000001 && Abs(ReadFloat(offset)) < 100000000000000000);
}

typedef struct {
    wstring str;
} WSTRING <optimize=false, read=ReadWSTRING, write=WriteWSTRING>;
    wstring ReadWSTRING(WSTRING &input) { return input.str; }
    void WriteWSTRING(WSTRING &input, wstring s) {
        for (k = 0; k < sizeof(input.str)/2; k++)
            input.str[k] = 0;
        input.str = s;
    }

typedef struct {
    FSkip(16);
} SUBPROP4 <optimize=false>;

typedef struct {
    uchar uuid[16];
} rGUID <read=ReadrGUID>;

    string ReadrGUID (rGUID &g) {
        local char s[37];
        SPrintf(s,
            "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
            g.uuid[0], g.uuid[1], g.uuid[2], g.uuid[3], g.uuid[4], g.uuid[5], g.uuid[6], g.uuid[7],
            g.uuid[8], g.uuid[9], g.uuid[10], g.uuid[11], g.uuid[12], g.uuid[13], g.uuid[14], g.uuid[15]
        );
        return s;
    }

typedef struct {
    uint32 nameHash, ukn;
    local uint64 test <hidden=true> = ReadUInt64(FTell());
    if (test > 0 && start + test < FileSize() && start + test > FTell()) {
        uint64 hashOffs;
        FSeek(start + hashOffs);
        rGUID Guid;
    } else if (detectedFloat(FTell())) {
        float value;
    } else { uint value; }
    if (exists(value))
        local float hiddenValue <hidden=true> = value;
    FSeek(startof(nameHash) + 16);
} NODE_PARAMETER <read=ReadNODE_PARAMETER, optimize=false>;

string ReadNODE_PARAMETER (NODE_PARAMETER &input) {
    string s = "";
    if (exists(input.hiddenValue))
        SPrintf(s, "%g", input.hiddenValue);
    return s;
}

typedef struct {
    ushort propCount, B, C; //skipToNextLine();
    skipToNextLine();
    uint64 offs1, offs2;
    if (propCount > 0) {
        if (offs1 < FileSize()) {
            FSeek(start + offs1);
            string name; //SUBPROP3 SubProp3;
        }
        if (offs2 < FileSize()) {
            FSeek(start + offs2);
            if (ReadUShort(FTell()+2) != 0)
                NODE_PARAMETER Value;
            else
                SUBPROP4 SubProp4;
        }
    }
    FSeek(startof(this)+32);
} SUBPROP2 <optimize=false>;

typedef struct {
    uint64 nameOffset;
    uint64 dataOffset;
	uint64 uknOffset;
	uint16 nodeId;
	uint16 valueCount;
	uint32 uknCount;
    local int pos <hidden=true> = FTell();
    FSeek(start + nameOffset);
    string name <open=suppress>;
    if (dataOffset > 0) {
        FSeek(start + dataOffset);
        NODE_PARAMETER parameters[valueCount];
        if (exists(parameters[0].hiddenValue))
            local float hiddenValue <hidden=true> = parameters[0].hiddenValue;
    }
    FSeek(pos);
} NODE <name=ReadNODENAME, read=ReadNODE, optimize=false>;

string ReadNODENAME (NODE &input) {
    if (exists(input.name))
        return input.name;
    return "";
}

string ReadNODE (NODE &input) {
    string s = "";
    if (exists(input.hiddenValue))
        SPrintf(s, "%g", input.hiddenValue);
    return s;
}
struct NodeConnection {
    uint16 node1;
    uint16 input;
    uint16 node2;
    uint16 output;
};

string ReadNodeConnection(NodeConnection &rel) {
    string s = "";
    SPrintf(s, "node %d input %d <- node %d output %d", rel.node1, rel.input, rel.node2, rel.output);
    return s;
}

typedef struct {
    uint64 nodesOffset;
    uint64 connectionsOffset;
    ushort nodeCount, resultNodeId, ukn; //skipToNextLine();
    if (nodeCount > 0) {
        if (nodesOffset > 0) {
            FSeek(start + nodesOffset);
            if (ReadUInt(FTell()) < FileSize())
                struct NODE Node[nodeCount];
            else
                string name <open=suppress>;
        }
        if (connectionsOffset > 0) {
            FSeek(start + connectionsOffset);
            struct{
                while (ReadShort() < nodeCount && ReadInt64() != 0) {
                    NodeConnection relation <read=ReadNodeConnection>;
                }
            } Connections;
        }
    }
} PROP <read=ReadProp, optimize=false>;

string ReadProp (PROP &input) {
    if (exists(input.name))
        return input.name;
    return "";
}

typedef struct {
    rGUID Guid;
    uint64 nameOffset;
    FSeek(start + nameOffset);
    wstring name <open=suppress>;
    FSeek(startof(nameOffset) + 8);
    uint64 valueOffset, expressionOffset;
    uint type : 24;
    uint flags : 8 <format=binary>;
    uint nameHash;

    if (valueOffset > 0) { //!didSeek &&
        FSeek(start + valueOffset);

		if (valueOffset > 0) { //!didSeek &&
			FSeek(start + valueOffset);
			switch (type) {
				case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 9: int value; break;
				case 8: uint32 value; break;
				case 11: float value; break;
				case 12: double value; break;
				case 13: string value; break;
				case 14: wstring value; break;
				case 15: string value; break;
				case 17: float value[2]; break;
				case 18: float value[3]; break;
				case 19: float value[4]; break;
				case 20: float value[16]; break;
				case 21: rGUID value;break;
			}
		}
    }

    if (expressionOffset > 0) {
        FSeek(start + expressionOffset);
        PROP expression;
    }
    FSeek(startof(nameHash) + 4);
} VARIABLE <optimize=false, name=ReadVariableName, read=ReadVariable, write=WriteVariable>;

wstring ReadVariableName(VARIABLE &input) {
    if (exists(input.expression))
        return (input.name + "*");
    return input.name;
}

void WriteVariable(VARIABLE &input, string s) {
    WriteUInt(startof(input.Value_As_Int), Atoi(s));
}

wstring ReadVariable(VARIABLE &input) {
    string s = "";
    if (exists(input.Value_As_Float)) {
        if (detectedFloat(startof(input.Value_As_Float)))
            SPrintf(s, "%g", input.Value_As_Float[0]);
        else
            SPrintf(s, "%u", input.Value_As_Int[0]);
    }
    return (s);
}

typedef struct {
    start = startof(this);
    struct {
        uint version, magic;
        uint64 stringsOffset, dataOffset, embedsInfoOffset, hashInfoOffset;
        if (version < 3)
            uint64 ukn;
        uint UVARhash;
        ushort variableCount, embedCount;
    } Header;

    if (Header.variableCount && Header.dataOffset > 0) {
        FSeek(start + Header.dataOffset);
        struct {
            for (j=0;j<Header.variableCount;j++) {
                VARIABLE Variable;
            }
        } Data;
    }
    if (Header.stringsOffset > 0) {
        FSeek(start + Header.stringsOffset);
        struct {
            WSTRING str[Header.variableCount+1] <open=suppress>;
        } Strings;
    }
    if (Header.embedCount && Header.embedsInfoOffset > 0) {
        FSeek(start + Header.embedsInfoOffset);
        uint64 embedOffsets[Header.embedCount];
        struct {
            for (i=0; i<Header.embedCount; i++) {
                FSeek(start + embedOffsets[i]);
                struct UVAR UVAR_File;
                start = startof(parentof(this));
            }
        } Embedded_UVARs;
    }

    if (Header.variableCount && Header.hashInfoOffset > 0) {
        struct {
            FSeek(start + Header.hashInfoOffset);
            uint64 HashDataOffsets[4];
            FSeek(start + HashDataOffsets[0]);
            rGUID Guids[Header.variableCount];
            FSeek(start + HashDataOffsets[1]);
            uint GuidMap[Header.variableCount];
            FSeek(start + HashDataOffsets[2]);
            uint nameHashes[Header.variableCount];
            FSeek(start + HashDataOffsets[3]);
            uint nameHashMap[Header.variableCount];
        } HashData;
    }

} UVAR <read=ReadUVAR>;

string ReadUVAR (UVAR &input) {
    if (exists(input.Strings.str[0]))
        return input.Strings.str[0].str;
    return "";
}

UVAR UVAR_File <fgcolor=cGreen>;

