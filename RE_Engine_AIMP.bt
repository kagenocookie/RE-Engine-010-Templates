//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: AIMP.bt
//   Authors: shadowcookie
//   Version: 0.1
//   Purpose:
//  Category: RE Engine
// File Mask: *.aimap.*|*.aiwayp.*|*.ainvm.*|*.aivspc.*|*.aiwaypmgr.*|*.ainvmmgr.*
//  ID Bytes: 41 49 4D 50
//   History:
//------------------------------------------------

#include "common.bt";

local int version = Atoi(SubStr(FileNameGetExtension(GetFileName()), 1));
local int isWaypointManager = Strstr(GetFileName(), ".aiwaypmgr.") != -1;
local int isMap = Strstr(GetFileName(), ".aimap.") != -1;
local int isNavmesh = Strstr(GetFileName(), ".ainvm.") != -1;
local int isVolumeSpace = Strstr(GetFileName(), ".aivspc.") != -1;
local int isWaypoint = !isWaypointManager && !isNavmesh && !isMap && !isVolumeSpace;

local int format28 = (isMap && version <= 28); // dmc5(28), re2(27)
local int format41 = (isMap && version == 41 || isWaypoint && version == 3); // re2 rt, re8
local int format43 = (isWaypoint && version == 5 || isVolumeSpace && version == 6 || isMap && version == 43 || isNavmesh && version == 18); // re4
// dd2, wilds - based on aimapattr version
local int format46 = (isWaypoint && version > 6 || isWaypointManager && version >= 8 || isNavmesh && version >= 30);
local int format = format28 ? 28 : format41 ? 41 : format43 ? 43 : 46;

uint magic;
FixedWString name <read=ReadFixedWString>;

if (format > 41) {
    FixedWString hash <read=ReadFixedWString>;
}

uint32 num; // likely flags

if (format < 46) {
    GUID guid;
    int ukn;
} else if (format46) {
    uint ukn;
    uint32 hash1;
    uint32 hash2;
    uint ukn2;
}

uint64 layersOffset;
uint64 rszOffset;

uint64 embeddedContentOffset;
uint64 contentGroup1Offset;

uint64 indexDataOffset;

uint64 secondContentGroupOffset, secondNodeTableOffset;

struct ContentGroupBounds {
    float ukn1, ukn2;
    vec3Padded min <read=ReadVec3P>;
    vec3Padded max <read=ReadVec3P>;
};

struct TriangleData {
    uint32 triangleCount;
    uint32 maxIndex;
    if (format >= 41) uint32 minIndex;

    struct TriangleInfo {
        uint32 uknId;
        uint32 index;
        uint32 id, n1, n2, n3, neighborCount, n4;
    } Triangles[triangleCount] <read=(Str("%d %d [%d]  %d", index, id, n4, neighborCount)), optimize=false>;

    local int triCount = 0;
    struct {
        local int i = 0;
        for (i = 0; i < triangleCount; i++) {
            if (Triangles[i].neighborCount == 0) {
                continue;
            }
            struct {
                triCount += Triangles[i].neighborCount;
                struct {
                    uint32 index;
                    uint32 triangleIndex, neighborIndex;
                    uint32 n3, n4, n5, n6;
                } connections[Triangles[i].neighborCount] <read=(Str("%d - %d    %d %d %d %d", triangleIndex, neighborIndex, n3, n4, n5, n6))>;
            } TriangleNeighbors <read=Str("%d - %d", connections[0].triangleIndex, connections[0].neighborIndex)>;
        }
    } Neighbors;
};

struct TypedIntData {
    uint32 typesCount1, typesCount2, typesCount3, typesCount4;
    if (typesCount1 > 0) uint32 type1[typesCount1];
    if (typesCount2 > 0) uint32 type2[typesCount2];
    if (typesCount3 > 0) uint32 type3[typesCount3];
    if (typesCount4 > 0) uint32 type4[typesCount4];
};


struct ContentGroupMapPointHeader(uint32 count) {
    struct { // via.navigation.map.NodeInfo - position and normals?
        vec3 pos <read=ReadVec3>;
        vec3 normal <read=ReadVec3>;
    } nodes[count] <read=ReadVec3(pos)>;
};

struct ContentGroupTrianglesHeader(uint32 count) {
    struct {
        uint32 ind[3];
        ubyte flags[4];
        vec3 pos <read=(Str("%f %f %f",x, y, z))>;
    } TriangleNode[count]  <read=(Str("%d %d %d   : %f %f %f", ind[0], ind[1], ind[2], pos.x, pos.y, pos.z))>;
};

struct ContentGroupPolygonHeader(uint32 count) {
    struct PolygonNode {
        uint32 pointCount;
        uint32 nums[pointCount];
        uint8 bytes[pointCount];
        align(4);
        float floats[pointCount];
        vec3 min <read=ReadVec3>, max <read=ReadVec3>;
    } Polygons[count] <optimize=false, read=pointCount>;
};

struct ContentGroupMapBoundaryHeader(uint32 count) {
    struct {
        uint32 indices[8];
        vec3 min <read=ReadVec3>, max <read=ReadVec3>;
    } boundaries[count] <read=Str("%f %f %f   --   %f %f %f", min.x, min.y, min.z, max.x, max.y, max.z)>;
};

struct ContentGroupMapAABBHeader(uint32 count) {
    struct {
        uint8 indices[8];
        if (format > 28)
            uint32 data[13];
    } boundaries[count] <optimize=false>;
};

struct ContentGroupWallHeader(uint32 count) {
    struct {
		vec4 m1 <read=ReadVec4>, m2 <read=ReadVec4>, m3 <read=ReadVec4>, m4 <read=ReadVec4>;

		vec4 scale <read=ReadVec4>, rot <read=ReadVec4>, pos <read=ReadVec4>;
		uint32 data[8];
    } boundaries[count] <read=Str("%d %d %d %d %d %d", data[0], data[1], data[2], data[3], data[4], data[5])>;
};

struct ContentGroupBody {
    uint32 positionCount;
    if (positionCount > 0) {
        vec3Padded positions[positionCount] <read=ReadVec3P>;
    }
    TriangleData Triangles;
};

struct ContentGroupBodyEmbed {
    uint32 positionCount;
    if (positionCount > 0) {
        struct {
            uint32 indices[4];
            vec3Padded position <read=ReadVec3P>;
        } positions[positionCount];
    }
    TriangleData Triangles;
};

struct ContentGroupNull {
    uint32 todo;
};

typedef struct ContentGroupItemHeaderData(uint32 count, wchar_t classname[]) {
    if (classname == "via.navigation.map.ContentGroupMapPoint") {
        ContentGroupMapPointHeader data(count);
    } else if (classname == "via.navigation.map.ContentGroupTriangle") {
        ContentGroupTrianglesHeader data(count);
    } else if (classname == "via.navigation.map.ContentGroupPolygon") {
        ContentGroupPolygonHeader data(count);
    } else if (classname == "via.navigation.map.ContentGroupMapBoundary") {
        ContentGroupMapBoundaryHeader data(count);
    } else if (classname == "via.navigation.map.ContentGroupMapAABB") {
        ContentGroupMapAABBHeader data(count);
    } else if (classname == "via.navigation.map.ContentGroupWall") {
        ContentGroupWallHeader data(count);
    } else {
        ContentGroupNull TODO;
    }
};

typedef struct ContentGroupItemHeader {
    FixedWString classname <read=str>;
	uint32 count;
    ContentGroupItemHeaderData data(count, classname.str);
};

struct ContentGroupContainer {
    uint32 contentCount;
    if (contentCount == 0) {
        uint32 a, b, c, d, e;
    } else {
        local int i = 0;
        for (i = 0; i < contentCount; ++i) {
            ContentGroupItemHeader header <optimize=false, read=classname.str>;
        }

	    uint32 something; //seems to be always 0
        ContentGroupBody data;
    }

    // god knows what this is, using the bounds Vector4's padding bytes as an indicator
    if (ReadInt(FTell() + sizeof(ContentGroupBounds) - 4) != 0 || ReadInt(FTell() + sizeof(ContentGroupBounds) - 4 - sizeof(vec3Padded)) != 0) {
        uint32 mysteryPadding <read="YES">;
    }

    ContentGroupBounds bounds;
    TypedIntData quadData;
};

string ReadContentGroup(ContentGroupContainer &grp) { return exists(grp.header[0].classname.str) ? grp.header[0].classname.str : "---"; }

// some files have no content groups at all (DMC5)
if (exists(contentGroup1Offset) && contentGroup1Offset > 0) {
    FSeek(contentGroup1Offset);
    ContentGroupContainer ContentGroup1 <read=ReadContentGroup>;
}

if (secondContentGroupOffset > 0 && secondNodeTableOffset) {
    FSeek(secondContentGroupOffset);
	ContentGroupContainer ContentGroup2 <read=ReadContentGroup>;
}

struct CountedIndices {
    uint32 count;
    if (count > 0) {
        uint32 indices[count];
    }
};

struct ContentGroupOffsetData(ContentGroupItemHeader &header) {
    if (header.classname.str == "via.navigation.map.ContentGroupMapPoint") {
        uint32 nodeParentIds[header.count];
    } else if (header.classname.str == "via.navigation.map.ContentGroupTriangle") {
        uint32 triangleData[header.count];
    } else if (header.classname.str == "via.navigation.map.ContentGroupPolygon") {
        CountedIndices polygonTriangleIndices[header.count] <optimize=false, read=count>;
    } else if (header.classname.str == "via.navigation.map.ContentGroupMapBoundary") {
        uint32 masksOrSomething[header.count];
    } else if (header.classname.str == "via.navigation.map.ContentGroupWall") {
        uint32 masksOrSomething[header.count];
    } else if (header.classname.str == "via.navigation.map.ContentGroupMapAABB") {
        CountedIndices aabbData[header.count] <optimize=false, read=count>;
    }
};

FSeek(indexDataOffset);
align(16);
if (exists(ContentGroup1.header[0])) ContentGroupOffsetData offsetData(ContentGroup1.header[0]);
if (exists(ContentGroup1.header[1])) ContentGroupOffsetData offsetData(ContentGroup1.header[1]);
if (exists(ContentGroup1.header[2])) ContentGroupOffsetData offsetData(ContentGroup1.header[2]);
align(16);
if (exists(ContentGroup2.header[0])) ContentGroupOffsetData offsetData(ContentGroup2.header[0]);
if (exists(ContentGroup2.header[1])) ContentGroupOffsetData offsetData(ContentGroup2.header[1]);
if (exists(ContentGroup2.header[2])) ContentGroupOffsetData offsetData(ContentGroup2.header[2]);

if (exists(layersOffset)) {
    FSeek(layersOffset);
    if (format == 28) {
        struct {
            uint32 nameHash;
            uint32 flags <format=binary>;
        } layers[64] <optimize=false, read=(nameHash)>;
    } else {
        struct {
            FixedWString name;
            uint32 flags <format=binary>;
        } layers[64] <optimize=false, read=(name.str)>;
    }
}

if (exists(rszOffset)) {
    FSeek(rszOffset);
    struct {
        uint magic;
        uint version;
        int objectCount;
        int instanceCount;
        long userdataCount;
        long instanceOffset;
        long dataOffset;
        long userdataOffset;
    } RSZ;
}


string mapToUknownIdsData(uint32 val) {
    local uint index = val;
    local string result;
    SPrintf(result, "%u", index);
    if (index <= nodeParentCount) {
        local uint oldPos = FTell();
        FSeek(nodeParentTblOffset + index * 4);
        local uint exVal = ReadUInt();
        FSeek(oldPos);
        SPrintf(result, "%u => Parent[%u] = %u", index, index, exVal);
    }
    return result;
}

FSeek(embeddedContentOffset);

typedef struct EmbeddedIndexedTriangle {
    uint32 index;
    uint16 b1;
    uint8 b2, b3;

    uint16 c1;
    uint8 c2, c3;

    uint32 d, e, f, g;
};

typedef struct EmbeddedTriangleData {
    uint32 positionCount;
    if (positionCount > 0) {
        struct {
            uint16 b1;
            uint8 b2, b3;
            uint32 b, c, d;
            vec3Padded vec <read=ReadVec3P>;
        } Positions[positionCount] <read=(Str("%d %d %d %d %f %f %f", c, b1, b2, b3, vec.x, vec.y, vec.z))>;
    }

    uint32 positionCount2;
    if (positionCount2 > 0) {
        vec3Padded Positions2[positionCount2] <read=ReadVec3P>;
    }

    vec3Padded min <read=ReadVec3P>;
    vec3Padded max <read=ReadVec3P>;

    uint32 count1;
    if (count1 > 0) {
        EmbeddedIndexedTriangle data1[count1] <read=index>;
    }

    uint32 count2;
    if (count2 > 0) {
        EmbeddedIndexedTriangle data2[count2] <read=index>;
    }

    uint32 count3;
    if (count3 > 0) {
        EmbeddedIndexedTriangle data3[count3] <read=index>;
    }

    if (format > 28) {
        uint32 count4;
        if (count4 > 0) {
            struct {
                uint32 a, b;
            } data4[count4];
        }
        uint32 count5;
    }
};

typedef struct EmbeddedPolygonData {
};

typedef struct EmbeddedContentData {
    uint32 nodeCount;

    if (nodeCount > 0) {
        FixedWString classname <read=ReadFixedWString>;
        ContentGroupItemHeaderData header(nodeCount, classname.str);
    }

    EmbeddedTriangleData data;
};

typedef struct EmbeddedPreData {
    uint32 count1;
    if (count1 > 0) {
        uint32 data1[count1];
    }
    uint32 count2;
    if (count2 > 0) {
        uint32 data2[count2];
    }
};

struct {
    uint32 hash1, hash2;
    if (format == 28) {
        uint32 hash3, hash4;
    }
    uint32 count;

    if (count > 0) {
        struct {
            uint32 hash1, hash2;
            if (format == 28) {
                uint32 hash3, hash4;
            }

            EmbeddedPreData preData;

            EmbeddedContentData data1;
            if (format > 28) {
                EmbeddedContentData data2;

                FixedWString key <read=ReadFixedWString>;
            }
        } embed[count] <optimize=false, read=(exists(key.str) ? key.str : Str("%d %d", hash3, hash4))>;
    }

} embeddedData;