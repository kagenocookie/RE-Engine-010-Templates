//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: MCOL.bt
//   Authors: shadowcookie
//   Version: 0.1
//   Purpose:
//  Category: RE Engine
// File Mask: *.mcol.*|*.terr.*
//  ID Bytes: 4D 43 4F 4C,54 45 52 52
//   History:
//------------------------------------------------

local int version = Atoi(SubStr(FileNameGetExtension(GetFileName()), 1));

#include "common.bt";
#include "RE_BVH_common.bt";

if (version == 2) {
    Printf("Unsupported file version!\n");
}

// via.dynamics.RigidBodyMeshResourceHolder
typedef struct RBMHeader { // rmesh
	uint32 magic;
    uint32 ukn;
    uint64 bvhOffset;
    // used by via.dynamics.MeshShape
    // should / can contain:
    // vertices (vec3)
    // triangles (3x vec3)
};

// via.physics.CollisionMeshResourceHolder
typedef struct MCOLHeader {
	uint32 magic;
    uint32 bvhSize;
    uint stringCount;
    uint padding;
    if (version == 2) {
        local uint64 bvhOffset = startof(this) + 16;
    } else {
        uint64 mcolStringTableOffset;
        local uint64 bvhOffset = startof(this) + 32;
    }
};

// via.physics.TerrainResourceHolder
typedef struct TERRHeader {
	uint32 magic;
    uint32 bvhSize;
    uint count;
    uint guidCount;
    GUID guid;
    uint64 offset1;
    uint64 guidOffset;
    local uint64 bvhOffset = startof(this) + 48;
};

local int isMcol = (ReadUInt() == 0x4c4f434d);
local int isTerr = (ReadUInt() == 0x52524554);
local int isRmesh = (ReadUInt() == 0x204D4252);
if (isMcol) {
	MCOLHeader Header;
} else if (isRmesh) {
	RBMHeader Header;
} else if (isTerr) {
    TERRHeader Header;
}

if (exists(Header.bvhSize) && Header.bvhSize == 0) {
    Exit(0);
}

FSeek(Header.bvhOffset);
struct BVHHeader {
	uint32 magic;
	uint32 verticesCount;
    uint32 indicesCount;
    uint32 uknCount1;
    uint32 stringCount;
    if (version > 2) {
        uint32 spheresCount;
        uint32 capsulesCount;
        uint32 boxesCount;
        uint32 uknCount2;
    }

    uint32 treeDataSize;
    uint64 treeDataOffset;
    uint64 verticesOffset;
    uint64 indicesOffset;
    uint64 uknOffset;

    uint64 stringTableOffset;
    if (version > 2) {
        uint64 spheresOffset;
        uint64 capsulesOffset;
        uint64 boxesOffset;
        uint64 uknOffsetPadding;
    }
} bvh <read=(exists(StringTable.name) ? StringTable.name : "")>;

vec3p minBounds;
vec3p maxBounds;

if (bvh.treeDataSize > 0) {
    FSeek(startof(bvh) + bvh.treeDataOffset);
    BvhTree Tree;
}

if (bvh.verticesCount > 0) {
    FSeek(startof(bvh) + bvh.verticesOffset);
    struct {
	    vec3p vertex[bvh.verticesCount] <read=Str("%f %f %f", x, y, z)>;
    } Vertices;
}

if (bvh.indicesCount > 0) {
    FSeek(startof(bvh) + bvh.indicesOffset);
    // hard separating the structs because the editor can't handle large arrays without optimizations
    struct {
        if (version >= 20021) {
            struct {
                uint32 ukn0;
                uint32 layerIndex; // corresponds to a string index in the string table
                uint32 mask;
                uint32 partId;

                uint32 ukn1;
                uint32 ukn2;
                uint32 ukn3;
                uint32 ukn4;
                uint32 ukn5;
                uint32 ukn6;
                uint32 ukn7;

                uint32 posIdx1;
                uint32 posIdx2;
                uint32 posIdx3;
                int32 edgeIdx1;
                int32 edgeIdx2;
                int32 edgeIdx3;
            } data[bvh.indicesCount] <read=Str("%d:%d - %x  (%d %d %d)", layerIndex, partId, mask, posIdx1, posIdx2, posIdx3)>;
        } else if (version >= 13020) {
            struct {
                uint32 ukn0;
                uint32 layerIndex; // corresponds to a string index in the string table
                uint32 mask;

                uint32 ukn1;
                uint32 ukn2;
                uint32 ukn3;
                uint32 ukn4;
                uint32 ukn5;
                uint32 ukn6;
                uint32 ukn7;

                uint32 posIdx1;
                uint32 posIdx2;
                uint32 posIdx3;
                int32 edgeIdx1;
                int32 edgeIdx2;
                int32 edgeIdx3;
            } data[bvh.indicesCount] <read=Str("%d - %x  (%d %d %d)", layerIndex, mask, posIdx1, posIdx2, posIdx3)>;
        } else if (version >= 3017) {
            struct {
                uint32 ukn0;
                uint32 layerIndex; // corresponds to a string index in the string table

                uint32 ukn1;
                uint32 ukn2;
                uint32 ukn3;
                uint32 ukn4;
                uint32 ukn5;
                uint32 ukn6;
                uint32 ukn7;

                uint32 posIdx1;
                uint32 posIdx2;
                uint32 posIdx3;
                int32 edgeIdx1;
                int32 edgeIdx2;
                int32 edgeIdx3;
                uint32 ukn;
            } data[bvh.indicesCount] <read=Str("%d  (%d %d %d)", layerIndex, posIdx1, posIdx2, posIdx3)>;
        } else {
            // 2 = re7 non-rt; struct unknown for now because the header is a pain in the ass and not worth figuring out
            struct {
                uint32 ukn0;

                uint32 ukn1;
                uint32 ukn2;
                uint32 ukn3;
                uint32 ukn4;
                uint32 ukn5;
                uint32 ukn6;
                uint32 ukn7;

                uint32 posIdx1;
                uint32 posIdx2;
                uint32 posIdx3;
                int32 edgeIdx1;
                int32 edgeIdx2;
                int32 edgeIdx3;
                uint32 layerIndex; // corresponds to a string index in the string table
                uint32 ukn;
            } data[bvh.indicesCount] <read=Str("%d  (%d %d %d)", layerIndex, posIdx1, posIdx2, posIdx3)>;
        }
    } Indices;
}

if (version >= 3017) {
    if (bvh.spheresCount > 0) {
        FSeek(startof(bvh) + bvh.spheresOffset);
        struct {
            uint ukn0;
            uint layerIndex;
            uint mask;
            uint partId;
            vec4 vec;
        } Spheres[bvh.spheresCount] <read=Str("%d:%d %x / %f %f %f %f", layerIndex, partId, mask, vec.x, vec.y, vec.z, vec.w), optimize=false>;
    }

    if (bvh.capsulesCount > 0) {
        FSeek(startof(bvh) + bvh.capsulesOffset);
        struct {
            uint ukn0;
            uint layerIndex;
            uint mask;
            uint partId;
            Capsule capsule;
        } Capsules[bvh.capsulesCount] <read=Str("%d:%d %x / %f %f %f", layerIndex, partId, mask, capsule.p0.x, capsule.p0.y, capsule.p0.z), optimize=false>;
    }

    if (bvh.boxesCount > 0) {
        FSeek(startof(bvh) + bvh.boxesOffset);
        struct {
            uint ukn0;
            uint layerIndex;
            uint mask;
            uint partId;
            OBB box;
        } Boxes[bvh.boxesCount] <read=Str("%d:%d %x / %s", layerIndex, partId, mask, ReadMat4(box.coord)), optimize=false>;
    }
}

if (bvh.stringTableOffset > 0) {
    FSeek(startof(bvh) + bvh.stringTableOffset);
    if (version <= 4) { // re7: terr.4 or mcol.2
        struct {
            uint32 index;
            uint32 zero;
            uint32 zero;
            uint32 zero;
        } LayerIndices[bvh.stringCount] <read=index>;
    } else {
        struct {
            OffsetWString str(startof(bvh))[bvh.stringCount * 2];
        } StringTable <read=(exists(str[0].str) ? str[0].str : "<empty>")>;
    }
}

if (isMcol) {
    // gets mapped into a via.physics.MaterialInfo array (physics material - ID + 3x attributes)
    // mcol string table here is identical to the bvh's inner string table
    if (exists(Header.mcolStringTableOffset)) {
        FSeek(Header.mcolStringTableOffset);
        struct {
            OffsetWString str(0)[bvh.stringCount * 2];
        } MCOLStringTable <read=(exists(str[0].str) ? str[0].str : "<empty>")>;
    }
} else if (isTerr) {
    if (Header.count > 0) {
        FSeek(Header.offset1);
        struct {
            GUID null1;
            GUID null2;
            uint64 uknOffset1;
            uint64 uknOffset2;
        } TerrainTypes[Header.count];
    }
    if (Header.guidCount > 0) {
        FSeek(Header.guidOffset);
        struct {
            GUID guid;
        } Guids[Header.guidCount];
    }
}
