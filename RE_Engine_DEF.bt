//------------------------------------------------
//--- 010 Editor v9.0.2 Binary Template
//
//      File: DEF.bt
//   Authors: shadowcookie
//   Version: 1.0
//   Purpose:
//  Category: RE Engine
// File Mask: *.def.*
//  ID Bytes: 44 45 46 20
//   History:
//------------------------------------------------

local int version = Atoi(SubStr(FileNameGetExtension(GetFileName()), 1));

struct {
	uint32 magic <format=hex>;
	uint32 layerCount;
	uint32 channelCount;
	uint32 materialCount;
	if (version >= 6) {
		uint32 worldCount;
		uint32 ukn1;
		uint64 ukn2;
	}
} Header;

#include "common.bt";

local int totalLayers = 32;

typedef struct {
	GUID guid;
	OffsetWString name(0);
	uint hash;
	ColorRGBA color;
	uint ukn1, ukn2, ukn3, ukn4;
} Layer <read=name.str, optimize=false>;

Layer Layers[Header.layerCount];
if (Header.layerCount < totalLayers) {
	Layer UnusedLayers[totalLayers - Header.layerCount];
}

struct {
	local int i = 0;
	for (i = 0; i < Header.layerCount; i++) {
		struct {
			uint bits;
			local int index = i;
		} LayerBit<read=Str("%s - %s", IntToBinaryStr(bits), Layers[index].name.str)>;
	}
} LayerBits;
if (Header.layerCount < totalLayers) {
	uint UnusedLayerBits[totalLayers - Header.layerCount];
}

uint64 channelsOffset;
uint64 materialsOffset;
if (version >= 6) {
	uint64 worldsOffset;
	uint64 uknOffset2;
}

FSeek(channelsOffset);
struct {
	GUID guid;
	OffsetWString name(0);
	uint32 nameHash;
	uint16 ukn1;
	uint16 ukn2;
} Channels[Header.channelCount] <optimize=false, read=name.str>;

FSeek(materialsOffset);

struct {
	GUID guid;
	OffsetWString name(0);
	uint32 nameHash;
	uint32 ukn;
	// there's probably drag, friction, maybe gravity?
	float ukn1;
	float ukn2;
	float ukn3;
	uint32 ukn4;
} Materials[Header.materialCount] <optimize=false, read=name.str>;

if (exists(Header.worldCount) && worldsOffset > 0) {
	struct {
		GUID guid;
		OffsetWString name(0);
		uint32 nameHash;
		uint32 ukn;
		float gravity;
		uint32 ukn2;
		uint32 ukn3;
		uint32 ukn4;
	} Worlds[Header.worldCount] <optimize=false, read=name.str>;
}

struct {
	while (FTell() < FileSize()) {
		struct {
			wstring str;
		} str <read=str>;
	}
} StringTable;
